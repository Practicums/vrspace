# This is a workflow to build, deploy and test A-Frame applications.
name: VRspace Deployment Pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: 
      - master
      - all
  pull_request:
    branches: [ "master" ]

env:
  Name : vrspace
  Project_Name : metaverse-363005
  Cluster_name : vrspace-cluster
  Server_Name : vrspace-server
  Service_Name : vrspace-service
  Ext_IP: 104.154.136.216
  URL: https://vrspace.endpoints.metaverse-363005.cloud.goog 
  pkgname: vr.ball.application
  req_path: /content/worlds/solipsisworld/movements.html

jobs:
  build_deploy_test:
    runs-on: ubuntu-latest
    steps:
        - name: Checkout
          uses: actions/checkout@v2
        - name: Install SSH Key
          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.RSA_KEY }} 
            known_hosts: 'placeholder'
        
        - name: Adding Known Hosts
          run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          
        - name: Setting up
          uses: google-github-actions/setup-gcloud@v0
          with:
            version: '286.0.0'
            service_account_key: ${{ secrets.GCP_KEY }}
            service_account_email: ${{ secrets.SERVICE_EMAIL }}
            project_id:  ${{ env.Project_Name }}

        # - name: Copy files to remote vm
        #   run: rsync -avz -e "ssh -p 22" ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USER }}/project/${{ env.Name }} --delete

        - name: Authenticate Docker
          run: |-
            gcloud auth configure-docker -q

        # - name: Build Docker Image
        #   run: |-
        #     docker build -t vrspace .
            
        # - name: Tag Docker Image
        #   run: |-
        #     docker tag vrspace gcr.io/${{ env.Project_Name }}/${{ env.Name }}
            
        # - name: Push Docker Image
        #   run: |-
        #     docker push gcr.io/${{ env.Project_Name }}/${{ env.Name }}
            
        # - name: Deploy Docker Image and push as HTTPS
        #   uses: appleboy/ssh-action@master
        #   with:
        #     host: ${{ secrets.SSH_HOST }} 
        #     username: ${{ secrets.SSH_USER }}
        #     key: ${{ secrets.RSA_KEY }} 
        #     port: 22
        #     script: | 
        #       gcloud endpoints services deploy /home/${{ secrets.SSH_USER }}/project/${{ env.Name }}/openapi.yaml 
        #       gcloud container clusters create ${{ env.Cluster_name }} 2> /dev/null
        #       gcloud container clusters get-credentials ${{ env.Cluster_name }}
        #       kubectl delete service ${{ env.Service_Name }} 
        #       kubectl delete deployment ${{ env.Server_Name }}
        #       sleep 10
        #       helm install nginx-stable/nginx-ingress --set controller.service.loadBalancerIP="${{ env.Ext_IP }}",rbac.create=true --generate-name
        #       kubectl create deployment ${{ env.Server_Name }} --image=gcr.io/${{ env.Project_Name }}/${{ env.Name }}
        #       kubectl expose deployment ${{ env.Server_Name }} --name=${{ env.Service_Name }} --type=LoadBalancer --port=80 --target-port=8080 --load-balancer-ip=104.197.66.108
        #       sleep 60
        #       kubectl apply -f /home/${{ secrets.SSH_USER }}/project/${{ env.Name }}/ingress.yaml
        #       chmod +x /home/${{ secrets.SSH_USER }}/project/${{ env.Name }}/cert-manager_install.sh && /home/${{ secrets.SSH_USER }}/project/${{ env.Name }}/cert-manager_install.sh
        #       export EMAIL=${{ secrets.SERVICE_EMAIL }}
        #       cat /home/${{ secrets.SSH_USER }}/project/${{ env.Name }}/letsencrypt-issuer.yaml | sed -e "s/email: ''/email: $EMAIL/g" | kubectl apply -f-
        #       kubectl apply -f /home/${{ secrets.SSH_USER }}/project/${{ env.Name }}/ingress-tls.yaml
        #       sleep 30
        #       echo -n ${{ env.URL }} > ~/temp.txt
        #       echo -n ${{ env.req_path }} >> ~/temp.txt
        #       /home/${{ secrets.SSH_USER }}/testproject/code/webapp_test.py $(<~/temp.txt) > report_url.txt
        #       # /usr/bin/python3 /home/${{ secrets.SSH_USER }}/project/${{ env.Name }}/gen.py --pkgname "${{ env.pkgname }}" --long "VRspace Application" --short "VR" --url "${{ env.URL }}" --path "/home/${{ secrets.SSH_USER }}/project/${{ env.Name }}/content/worlds/solipsisworld/" --html "movements.html"
        #       # /usr/bin/sshpass -f /home/${{ secrets.SSH_USER }}/project/winpass.txt ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.WINDOWS_HOST }} 'mkdir .\Documents\${{ env.Name }}'
        #       # /usr/bin/sshpass -f /home/${{ secrets.SSH_USER }}/project/winpass.txt ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.WINDOWS_HOST }} 'del .\Documents\${{ env.Name }}\* /S /Q'
        #       # /usr/bin/sshpass -f /home/${{ secrets.SSH_USER }}/project/winpass.txt ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.WINDOWS_HOST }} 'wget ${{ env.URL }}/manifest.json -P .\Documents\${{ env.Name }} && ovr-platform-util.exe create-pwa -o .\Documents\${{ env.Name }}\output.apk --android-sdk %androidsdk% --package-name ${{ env.pkgname }} --manifest-content-file .\Documents\${{ env.Name }}\manifest.json'
        #       # /usr/bin/sshpass -f /home/${{ secrets.SSH_USER }}/project/winpass.txt scp -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.WINDOWS_HOST }}:Documents/${{ env.Name }}/output.apk /home/${{ secrets.SSH_USER }}/project/${{ env.Name }}/output.apk
        
        - name: Get Name File from VM
          run: rsync -avz -e "ssh -p 22"  ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/metaverseops/report_url.txt ./

        - name: Get Test Result from VM
          run: rsync -avz -e "ssh -p 22"  ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:$(cat report_url.txt) ./test_result.html


        # for sending emails
        - name: Install Node.js dependencies
          run: npm ci
        
        - id: files
          uses: jitterbit/get-changed-files@v1
        - run: |
              echo "display error" > report.txt;
              for changed_file in ${{ steps.files.outputs.all }}; 
              do
              if [[ $changed_file == *.js ]]
              then
                echo $changed_file >> report.txt
                npx eslint $changed_file >> report.txt || true
              fi
              done

        - name: Read Report
          id: report
          uses: juliangruber/read-file-action@v1
          with:
            path: ./report.txt

        - name: Send mail
          uses: dawidd6/action-send-mail@v3
          with:
            connection_url: smtp://${{secrets.email_sender}}:${{secrets.email_password}}@smtp-mail.outlook.com:587
            # Required mail server address if not connection_url:
            server_address: smtp-mail.outlook.com
            # Server port, default 25:
            server_port: 587
            # Optional whether this connection use TLS (default is true if server_port is 465)
            secure: true
            subject: Github Actions job result
            # Required recipients' addresses:
            to:  elina.ding@outlook.com
            # Required sender full name (address can be skipped):
            from: Metaverse CICD Developer # <user@example.com>
            # Optional plain body:
            body:  ${{ steps.report.outputs.content }}
            html_body: file://${{ github.workspace }}/test_result.html
            ignore_cert: true

