# This is a workflow to build, deploy and test A-Frame applications.
name: Solipsisworld Deployment Pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  Name : vrspace
  Project_Name : metaverse-363005
  Cluster_name : vrspace-cluster
  Server_Name : vrspace-server
  Service_Name : vrspace-service
  Ext_IP: 104.154.136.216
  URL: https://vrspace.endpoints.metaverse-363005.cloud.goog 
  pkgname: vr.ball.application

jobs:
  build_deploy_test:
    runs-on: ubuntu-latest
    steps:
        - name: Checkout
          uses: actions/checkout@v2
        - name: Install SSH Key
          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.RSA_KEY }} 
            known_hosts: 'placeholder'
        
        - name: Adding Known Hosts
          run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          
        - name: Setting up
          uses: google-github-actions/setup-gcloud@v0
          with:
            version: '286.0.0'
            service_account_key: ${{ secrets.GCP_KEY }}
            service_account_email: ${{ secrets.SERVICE_EMAIL }}
            project_id:  ${{ env.Project_Name }}

        - name: Copy files to remote vm
          run: rsync -avz -e "ssh -p 22" ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USER }}/project/${{ env.Name }} --delete

        - name: Authenticate Docker
          run: |-
            gcloud auth configure-docker -q
            
        - name: Build Docker Image
          run: |-
            docker build -t vrspace .
            
        - name: Tag Docker Image
          run: |-
            docker tag vrspace gcr.io/${{ env.Project_Name }}/${{ env.Name }}
            
        - name: Push Docker Image
          run: |-
            docker push gcr.io/${{ env.Project_Name }}/${{ env.Name }}
            
        - name: Deploy Docker Image and push as HTTPS
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.SSH_HOST }} 
            username: ${{ secrets.SSH_USER }}
            key: ${{ secrets.RSA_KEY }} 
            port: 22
            script: | 
              gcloud endpoints services deploy /home/${{ secrets.SSH_USER }}/project/${{ env.Name }}/openapi.yaml 
              gcloud container clusters create ${{ env.Cluster_name }} 2> /dev/null
              gcloud container clusters get-credentials ${{ env.Cluster_name }}
              kubectl delete service ${{ env.Service_Name }} 
              kubectl delete deployment ${{ env.Server_Name }}
              sleep 10
              helm install nginx-stable/nginx-ingress --set controller.service.loadBalancerIP="${{ env.Ext_IP }}",rbac.create=true --generate-name
              kubectl create deployment ${{ env.Server_Name }} --image=gcr.io/${{ env.Project_Name }}/${{ env.Name }}
              kubectl expose deployment ${{ env.Server_Name }} --name=${{ env.Service_Name }} --port=80 --target-port=80
              sleep 60
              kubectl apply -f ingress.yaml
              chmod +x /home/${{ secrets.SSH_USER }}/project/${{ env.Name }}/cert-manager_install.sh && /home/${{ secrets.SSH_USER }}/project/${{ env.Name }}/cert-manager_install.sh
              export EMAIL=${{ secrets.SERVICE_EMAIL }}
              cat /home/${{ secrets.SSH_USER }}/project/${{ env.Name }}/letsencrypt-issuer.yaml | sed -e "s/email: ''/email: $EMAIL/g" | kubectl apply -f-
              kubectl apply -f /home/${{ secrets.SSH_USER }}/project/${{ env.Name }}/ingress-tls.yaml
              /home/${{ secrets.SSH_USER }}/testproject/code/webapp_test.py ${{ env.URL }}